#!/usr/bin/env python

if __name__ == '__main__':
    main()

    parser = argparse.ArgumentParser(description="Main script for the segmentation of brainstem white matter in diffusion MRI.",
                                    epilog="Scripts are written by Mark Olchanyi")

    parser.add_argument('-i','--input',
                        help="Path to the raw or preprocessed DWI file", required=True)


    parser.add_argument('-bc','--bvals',
                        help="Path to the associated b-values file", type=str, required=True)


    parser.add_argument('-bv','--bvecs',
                        help="Path to the associated b-vectors file", type=str, required=True)


    parser.add_argument('-o','--output', type=str, required=False
                        help="output directory. The default output will be stored in the current path")


    parser.add_argument('--num_threads', default=1, type=str, required=False,
                        help="Number of threads to use in multiprocessing steps")


    parser.add_argument('--preprocess', type=str, default=False, required=False,
                        help="If chosen, the diffusion MRI volume will be preprocesed with MrTrix-wrapped dwifslpreprocc")


    parser.add_argument('--lowb', type=str, required=False,
                        help="ONLY IF SIM HAS BEEN GENERATED: Low-b volume file path for u-net")

    parser.add_argument('--fa', type=str, required=False,
                        help="ONLY IF SIM HAS BEEN GENERATED: FA volume file path for u-net")

    parser.add_argument('--tract', type=str, required=True,
                        help="ONLY IF SIM HAS BEEN GENERATED: generated SIM volume file path for u-net")

    parser.add_argument('-m','--model_file', help="UNet model file path", type=str, required=True)




    parser = argparse.ArgumentParser(description="Runs U-net white matter bundle prediction for brainstem WM")
    #------------------- Required Arguments -------------------
    parser.add_argument('-m','--model_file', help="UNet model file path", type=str, required=True)
    parser.add_argument('-o','--output_path', help="Output directory for saving segmentations", type=str, required=True)
    parser.add_argument('-lowb','--lowb_file', help="Low-b volume file path", type=str, required=True)
    parser.add_argument('-fa','--fa_file', help="FA volume file path", type=str, required=True)
    parser.add_argument('-tract','--tract_file', help="RGB tract file path", type=str, required=True)
    parser.add_argument('-llp','--label_list_path', help="Path to numpy array containing label values", type=str, required=True)
    parser.add_argument('-r','--resolution', help="Resolution of the input segmentations", type=float, default=1.0, required=False)
    parser.add_argument('-gm','--generator_mode', help="Which generator to use", type=str, default='rgb', required=False)
    parser.add_argument('-fc','--unet_feat_count', help="Number of features in UNet base level", type=int, default=24, required=False)
    parser.add_argument('-nl','--n_levels', help="Number of levels", type=int, default=5, required=False)
    parser.add_argument('-cs','--conv_size', help="Size of convolution kernel", type=int, default=3, required=False)
    parser.add_argument('-fm','--feat_multiplier', help="Feature multiplier per level", type=int, default=2, required=False)
    parser.add_argument('-cpl','--nb_conv_per_level', help="Number of convolutions per unet layer level", type=int, default=2, required=False)
    parser.add_argument('-a','--activation', help="Type of activation function, can be [elu] or [relu]", type=str, default='elu', required=False)
    parser.add_argument('-bb','--bounding_box_width', help="Bounding box width around the brainstem", type=int, default=64, required=False)
    parser.add_argument('-ar','--aff_ref', help="Feature multiplier per level", type=int, default=np.eye(4), required=False)




    #parser.add_argument('-cs','--cropsize', help="crop size around the brainstem", type=str, required=True)
    parser.add_argument('-hdr','--json_header_path',help="DICOM header json file (generated by something like dcm2niix) from the generated nifti", type=str, default=None, required=False)
    parser.add_argument('-sc','--scrape',help="Scraping for default DWI, bval and bvec files...not recommended", type=str, default=False, required=False)
    parser.add_argument('-us','--unet_segment',help="Segment out white matter from the tract files", type=str, default=False, required=False)
    parser.add_argument('-ufl','--use_fine_labels',help="Use brainstem subfields and hypothalamic labels as more finely parsed tractography ROIs", type=str, default=False, required=False)
